# File & Directory Commands

To navigate into the root directory, use "cd /"
To navigate to your home directory, use "cd" or "cd ~"
To navigate up one directory level, use "cd .."
To navigate to the previous directory (or back), use "cd -"

*** Initial Server Setup with Ubuntu 18.04

> Step 1 — Logging in as Root
ssh root@46.101.63.136 -- your_server_ip (Digital-Ocean-Droplet)
(The authenticity of host '127.0.0.1 (127.0.0.1)' can't be established.
ECDSA key fingerprint is SHA256:uY6GIjFdI9qTC4QYb980QRk+WblJF9cd5glr3SmmL+w.
Are you sure you want to continue connecting (yes/no)?)
*Type (exit .) This will logout the super user and go back to your account. If you run (sudo su),
that will open a shell as the superuser. Type (exit or Ctrl - D) to exit this shell.*
> sudo vim /etc/ssh/sshd_config
> vagrant ssh root-psswd -- 0759@vm
> Step 2 — Creating a New User

## adduser mtg

> Enter a strong password -- 0759@vmuser
> Step 3 — Granting Administrative Privileges

## usermod -aG sudo mtg

> Step 4 — Setting Up a Basic Firewall
Run the following command to get a list of all current available profiles:

## ufw app list

// Output
Available applications:
  OpenSSH
You need to make sure that the firewall allows SSH connections so that you can log back in next time.
You can allow these connections by typing:

## ufw allow OpenSSH

Afterwards, you can enable the firewall with:

## ufw enable

Type “y” and press ENTER to proceed. You can see that SSH connections are still allowed by typing:

## ufw status

As the firewall is currently blocking all connections except for SSH, if you install and configure additional services,
you will need to adjust the firewall settings to allow acceptable traffic in.
You can learn some common UFW operations in this guide.

> Step 5 — Enabling External Access for Your Regular User
(SSH, or Secure Shell, is a remote administration protocol that allows users to control and
modify their remote servers over the Internet. ... It provides a mechanism for authenticating a remote user,
transferring inputs from the client to the host, and relaying the output back to the client.)
The process for configuring SSH access for your new user depends on whether your server’s root account uses a
password or SSH keys for authentication.

If the Root Account Uses Password Authentication
If you logged in to your root account using a password, it means that password authentication is enabled for SSH.
You can SSH to your new user account by opening up a new terminal session and using SSH with your new username:

$ ssh mtg@127.0.0.1

After entering your regular user’s password, you will be logged in. Remember, if you need to run a command
with administrative privileges, type sudo before it like this: sudo (command_to_run)

*** How To Install Nginx on Ubuntu 18.04

> Since this may be your first interaction with the apt packaging system in this session, update the local package index
so that you have access to the most recent package listings. Afterward, you can install nginx:

$ sudo apt update
$ sudo apt install nginx

> Step 2 – Adjusting the Firewall
Before testing Nginx, the firewall software needs to be adjusted to allow access to the service. Nginx registers itself as a service with ufw upon installation, making it straightforward to allow Nginx access.

List the application configurations that ufw knows how to work with by typing the following:
$ sudo ufw app list

Output
Available applications:
  Nginx Full
  Nginx HTTP
  Nginx HTTPS
  OpenSSH

This list displays three profiles available for Nginx:

Nginx Full: This profile opens both port 80 (normal, unencrypted web traffic) and port 443 (TLS/SSL encrypted traffic)
Nginx HTTP: This profile opens only port 80 (normal, unencrypted web traffic)
Nginx HTTPS: This profile opens only port 443 (TLS/SSL encrypted traffic)
It is recommended that you enable the most restrictive profile that will still allow the traffic you’ve configured. Since you haven’t configured SSL for your server yet in this guide, you’ll only need to allow traffic on port 80.

You can enable this by typing the following:
$ sudo ufw allow 'Nginx HTTP'
Then, verify the change:
$ sudo ufw status
You should receive a list of HTTP traffic allowed in the output:

Output
Status: active

To                         Action      From
--                         ------      ----
OpenSSH                    ALLOW       Anywhere
Nginx HTTP                 ALLOW       Anywhere
OpenSSH (v6)               ALLOW       Anywhere (v6)
Nginx HTTP (v6)            ALLOW       Anywhere (v6)

Now that you’ve added the appropriate firewall rule,
you can check that your web server is running and able to serve content correctly.

> Step 3 – Checking your Web Server
At the end of the installation process, Ubuntu 18.04 starts Nginx. The web server should already be up and running.
Check with the systemd init system to make sure the service is running:
$ systemctl status nginx
> Step 4 – Managing the Nginx Process
To stop your web server, type the following:
$ sudo systemctl stop nginx
To start the web server when it is stopped, type the following:
$ sudo systemctl start nginx
To stop and then start the service again, type the following:
$ sudo systemctl restart nginx
If you are simply making configuration changes, you can often reload Nginx
without dropping connections instead of restarting it. To do this, type the following:
$ sudo systemctl reload nginx
By default, Nginx is configured to start automatically when the server boots.
If this is not what you want, you can disable this behavior by typing the following:
$ sudo systemctl disable nginx
To re-enable the service to start up at boot, you can type the following:
$ sudo systemctl enable nginx
> Step 5 – Setting Up Server Blocks (Recommended)
When using the Nginx web server, server blocks (similar to virtual hosts in Apache) can be used to encapsulate
configuration details and host more than one domain from a single server.
We will set up a domain called your_domain, but you should replace this with your own domain name.

Nginx on Ubuntu 18.04 has one server block enabled by default that is configured to serve documents
out of a directory at /var/www/html. While this works well for a single site, it can become unwieldy if you are hosting
multiple sites. Instead of modifying /var/www/html, let’s create a directory structure within /var/www for our
your_domain site, leaving /var/www/html in place as the default directory to be served if a client request doesn’t
match any other sites.

Create the directory for your_domain as follows, using the -p flag to create any necessary parent directories:
$ sudo rm -r /var/www/your_domain/html
$ sudo mkdir -p /var/www/mymtg.live/html

Next, assign ownership of the directory with the $USER environment variable:

$ sudo chown -R $USER:$USER /var/www/mymtg.live/html

The permissions of your web roots should be correct if you haven’t modified your (umask) value,
but you can make sure by typing the following:

$ sudo chmod -R 755 /var/www/mymtg.live

Next, create a sample index.html page using vim or your favorite editor:

$ vim /var/www/mymtg.live/html/index.html

Inside, add the following sample HTML:

<html>
    <head>
        <title>Welcome to mymtg.live!</title>
    </head>
    <body>
        <h1>Success! The mymtg.live server block is working!</h1>
    </body>
</html>

In order for Nginx to serve this content, it’s necessary to create a server block with the correct directives.
Instead of modifying the default configuration file directly,
make a new one at /etc/nginx/sites-available/your_domain:

$ sudo vim /etc/nginx/sites-available/mymtg.live

Add the following configuration block, which is similar to the default,
but updated for your new directory and domain name:

server {
        listen 80;
        listen [::]:80;

        root /var/www/mymtg.live/html;
        index index.html index.htm index.nginx-debian.html;

        server_name mymtg.live www.mymtg.live;

        location / {
                try_files $uri $uri/ =404;
        }
}

Notice that we’ve updated the (root) configuration to the new directory,
and the (server_name) to the domain name. Save and close the file when you are finished.

Next, enable the file by creating a link from it to the (sites-enabled) directory, which Nginx reads from during startup:

$ sudo ln -s /etc/nginx/sites-available/mymtg.live /etc/nginx/sites-enabled/

Two server blocks are now enabled and configured to respond to requests based on their (listen) and (server_name)
directives (you can read more about how Nginx processes these directives):

* (mymtg.live): Will respond to requests for (mymtg.live) and www.(mymtg.live).
* (default): Will respond to any requests on port (80) that do not match the other two blocks.

To avoid a possible hash bucket memory problem that can arise from adding additional server names,
it is necessary to adjust a single value in the (/etc/nginx/nginx.conf) file. Open the file:

$ sudo vim /etc/nginx/nginx.conf

Find the (server_names_hash_bucket_size) directive and remove the (#) symbol to uncomment the line:

...
http {
    ...
    server_names_hash_bucket_size 64;
    ...
}
...

Next, test to make sure that there are no syntax errors in any of your Nginx files:

$ sudo nginx -t

If there aren’t any problems, restart Nginx to enable your changes:

$ sudo systemctl restart nginx

Nginx should now be serving your domain name. You can test this by navigating to <http://mymtg.live>,
where you should see something like the following:

> Step 6 – Getting Familiar with Important Nginx Files and Directories
Now that you know how to manage the Nginx service itself, you should take a few minutes to familiarize yourself
with a few important directories and files.
> Content
(/var/www/html): The actual web content, which by default only consists of the default Nginx page you saw earlier,
is served out of the (/var/www/html) directory. This can be changed by altering Nginx configuration files.
> Server Configuration
(/etc/nginx): The Nginx configuration directory. All of the Nginx configuration files reside here.

(/etc/nginx/nginx.conf): The main Nginx configuration file. This can be modified to make changes to the
Nginx global configuration.

(/etc/nginx/sites-available/): The directory where per-site server blocks can be stored. Nginx will not use the
configuration files found in this directory unless they are linked to the (sites-enabled) directory.
Typically, all server block configuration is done in this directory, and then enabled by linking to the other directory.

(/etc/nginx/sites-enabled/): The directory where enabled per-site server blocks are stored.
Typically, these are created by linking to configuration files found in the sites-available directory.

(/etc/nginx/snippets): This directory contains configuration fragments that can be included elsewhere in the
Nginx configuration. Potentially repeatable configuration segments are good candidates for refactoring into snippets.

> Server Logs
(/var/log/nginx/access.log): Every request to your web server is recorded in this log file
unless Nginx is configured to do otherwise.

(/var/log/nginx/error.log): Any Nginx errors will be recorded in this log.

*** How To Secure Nginx with Let's Encrypt on Ubuntu 18.04

> Step 1 — Installing Certbot
The first step to using Let’s Encrypt to obtain an SSL certificate is to install the Certbot software on your server.

The Certbot project recommends that most users install the software through snap, a package manager originally
developed by Canonical (the company behind Ubuntu) and now available on many Linux distributions:

$ sudo snap install --classic certbot

Next, create a symbolic link to the newly installed /snap/bin/certbot executable from the /usr/bin/ directory.
This will ensure that the certbot command can run correctly on your server. To do this, run the following ln command.
This contains the -s flag which will create a symbolic or soft link, as opposed to a hard link:

$ sudo ln -s /snap/bin/certbot /usr/bin/certbot

> Step 2 — Confirming Nginx’s Configuration
Certbot needs to be able to find the correct (server) block in your Nginx configuration for it to be able to automatically
configure SSL. Specifically, it does this by searching for a (server_name) directive that matches the domain you request a
certificate for.

$  sudo vim /etc/nginx/sites-available/mymtg.live

Certbot can now find the correct server block and update it.

ssh root@46.101.63.136
ssh mtg@46.101.63.136
ssh-copy-id mtg@46.101.63.136
sudo vim /etc/ssh/sshd_config
rsync --archive --chown=mtg:mtg ~/.ssh /home/mtg
<http://46.101.63.136>
sudo mkdir -p /var/www/mymtg.live/html
sudo chown -R $USER:$USER /var/www/mymtg.live/html
sudo chmod -R 755 /var/www/mymtg.live
vim /var/www/mymtg.live/html/index.html

<html>
    <head>
        <title>Welcome to mymtg.live!</title>
    </head>
    <body>
        <h1>Success!  The mymtg.live server block is working!</h1>
    </body>
</html>

sudo vim /etc/nginx/sites-available/mymtg.live
server {
        listen 80;
        listen [::]:80;

        root /var/www/mymtg.live/html;
        index index.html index.htm index.nginx-debian.html;

        server_name mymtg.live www.mymtg.live;

        location / {
                try_files $uri $uri/ =404;
        }
}
sudo ln -s /etc/nginx/sites-available/mymtg.live /etc/nginx/sites-enabled/
sudo vim /etc/nginx/nginx.conf
sudo nginx -t
<https://mymtg.live>
sudo certbot --nginx -d mymtg.live -d www.mymtg.live
sudo vim $HOME/.ssh/authorized_keys

*** How To Set Up a Node.js Application for Production on Ubuntu 20.04
> Step 1 — Installing Node.js
cd ~
curl -sL <https://deb.nodesource.com/setup_14.x> -o nodesource_setup.sh
vim nodesource_setup.sh
sudo bash nodesource_setup.sh
sudo apt install nodejs
sudo apt install build-essential
> Step 2 — Creating a Node.js Application
cd ~
vim hello.js

const http = require('http');

const hostname = 'localhost';
const port = 3000;

const server = http.createServer((req, res) => {
  res.statusCode = 200;
  res.setHeader('Content-Type', 'text/plain');
  res.end('Hello World!\n');
});

server.listen(port, hostname, () => {
  console.log(`Server running at http://${hostname}:${port}/`);
});

node hello.js
Output
Server running at <http://localhost:3000/>

To test the application, open another terminal session on your server, and connect to localhost with curl:
curl <http://localhost:3000>
Output
Hello World!
kill the application by pressing CTRL+C

> Step 3 — Installing PM2
sudo npm install pm2@latest -g
pm2 start hello.js
pm2 startup systemd
sudo env PATH=$PATH:/usr/bin /usr/lib/node_modules/pm2/bin/pm2 startup systemd -u mtg --hp /home/mtg
pm2 save

You have now created a systemd unit that runs pm2 for your user on boot. This pm2 instance, in turn, runs hello.js.
sudo systemctl start pm2-mtg
systemctl status pm2-mtg

Stop an application with this command (specify the PM2 App name or id):
pm2 stop hello

Restart an application:
pm2 restart 0

List the applications currently managed by PM2:
pm2 list

Get information about a specific application using its App name:
pm2 info hello

The PM2 process monitor can be pulled up with the monit subcommand.
This displays the application status, CPU, and memory usage:
pm2 monit

> Step 4 — Setting Up Nginx as a Reverse Proxy Server
Your application is running and listening on (localhost), but you need to set up a way for your users to access it.
We will set up the Nginx web server as a reverse proxy for this purpose.

In the prerequisite tutorial, you set up your Nginx configuration in the /etc/nginx/sites-available/example.com file.
Open this file for editing:
sudo vim /etc/nginx/sites-available/mymtg.live

Within the (server) block, you should have an existing (location) / block. Replace the contents of that block
with the following configuration. If your application is set to listen on a different port,
update the highlighted portion to the correct port number:

server {
...
    location / {
        proxy_pass <http://localhost:127.0.1.1>;
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection 'upgrade';
        proxy_set_header Host $host;
        proxy_cache_bypass $http_upgrade;
    }
...
}

This configures the server to respond to requests at its root. Assuming our server is available at mymtg.live,
accessing <https://mymtg.live/> via a web browser would send the request to (hello.js),
listening on port (127.0.1.1) at (localhost).

sudo vim /etc/hosts
127.0.1.1 ubuntu-s-4vcpu-8gb-amd-lon1-01 ubuntu-s-4vcpu-8gb-amd-lon1-01
127.0.0.1 localhost
/etc/cloud/templates/hosts.debian.tmpl
/etc/cloud/cloud.cfg or cloud-config
sudo vim -r /etc/nginx/sites-available/mymtg.live
sudo rm -r /etc/nginx/sites-available/.mymtg.live.swp
curl -4 127.0.1.1
** How do I find my port number in Ubuntu? -- sudo lsof -i -P -n | grep LISTEN
node\x20/  1271   mtg   20u  IPv4  28689   0t0  TCP 127.0.0.1:3000 (LISTEN)
node\x20/  1271   mtg   20u  IPv4  28689   :0t0  TCP 127.0.0.1:3000 (LISTEN)

You can add additional (location) blocks to the same server block to provide access to other applications on the same
server. For example, if you were also running another Node.js application on port (127.0.0.1), you could add this
location block to allow access to it via <https://mymtg.live/app2>:

server {
...
    location /app2 {
        proxy_pass <http://127.0.0.1:3000>;
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection 'upgrade';
        proxy_set_header Host $host;
        proxy_cache_bypass $http_upgrade;
    }
...
}

Make sure you didn’t introduce any syntax errors by typing:
sudo nginx -t
Restart Nginx:
sudo systemctl restart nginx

*** Conclusion
Congratulations! You now have your Node.js application running behind an Nginx reverse proxy on an Ubuntu 20.04 server.
This reverse proxy setup is flexible enough to provide your users access to other applications or static web content
that you want to share.

***curl -4 127.0.0.1
ssh root@46.101.63.136
sudo vim $HOME/.ssh/authorized_keys
sudo vim /etc/hosts
ssh-copy-id root@46.101.63.136
ssh-copy-id mtg@46.101.63.136
//Loging
Run (ssh-add) on the client machine, that will add the (SSH key) to the agent.
Confirm with (ssh-add -l) again on the client that it was indeed added.
ssh mtg@46.101.63.136
//permit user auth
chmod 644 ~/.ssh/authorized_keys
//Disable root login
sudo vim /etc/ssh/sshd_config

**Configuring ignored files for a single repository**
Open Terminal.
Navigate to the location of your Git repository.
Create a .gitignore file for your repository.
$ touch .gitignore
If you want to ignore a file that is already checked in,
you must untrack the file before you add a rule to ignore it. From your terminal,
untrack the file.
$ git rm --cached FILENAME
**Configuring ignored files for all repositories on your computer**
Open Terminal.
Configure Git to use the exclude file ~/.gitignore_global
**How do I delete files after Gitignore update?
1 Update your . gitignore file – for instance, add a folder you don't want to track to . gitignore .
2 git rm -r --cached . – Remove all tracked files, including wanted and unwanted.
Your code will be safe as long as you have saved locally.
3 git add . – All files will be added back in, except those in . gitignore .
**Ignoring a previously committed file**
$ echo debug.log >> .gitignore
  
$ git rm --cached debug.log
rm 'debug.log'

**To Update changes/files**
$ git rm -r --cached FILENAME
$ touch .gitignore
$ git add .
$ git commit -m "Update changes"
$ git pull
$ git push

**Git Merge Master into Branch**
$ git checkout main
$ git pull
$ git checkout validator
$ git merge main
$ git push

**Initially wanted to put project in production**
pm2 start index.js
sudo pm2 save
To force saving use: pm2 save --force
pm2 startup systemd
pm2 stop index

**To copy from a file to another**
cp (1st-filename) (2nd-filename)

**How to launch default web browser from the terminal**
xdg-open <URL>
sudo apt install xdg-utils
sudo apt remove xdg-utils

**Testing my server/api**
Start nodemon server
Open another terminal and run:
curl -v <http://localhost:7000/api/v1/vehicles> | json
-To save to file: curl -o out.json <https://localhost:000/api/v1/vehicles/index.html>
